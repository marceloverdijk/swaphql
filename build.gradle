buildscript {
    ext {
        commonsLang3Version              = "3.7"
        graphqlJavaToolsVersion          = "4.3.0"
        graphqlSpringBootStarterVersion  = "4.0.0.M1"
        graphiqlSpringBootStarterVersion = "3.10.0"
        jsonapiConverterVersion          = "0.8"
        querydslPluginVersion            = "1.0.9"
        servletApiVersion                = "3.1.0"
        springBootVersion                = "2.0.1.RELEASE"
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}")
    }
}

configure(allprojects) { project ->

    apply plugin: "java"
    apply plugin: "idea"
    apply plugin: "io.spring.dependency-management"

    group = "com.github.marceloverdijk.swapilabs"
    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }

    dependencies {
        compile("org.apache.commons:commons-lang3:${commonsLang3Version}")
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

project("swapi-labs-commons-jpa") {

    description = "SWAPI Labs Commons JPA"

    apply plugin: "com.ewerk.gradle.plugins.querydsl"

    sourceSets {
        main {
            java {
                srcDir "${buildDir}/generated-sources/querydsl/java"
            }
        }
    }

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    }

    querydsl {
        querydslSourcesDir = "${buildDir}/generated-sources/querydsl/java"
        jpa = true
    }
}

project("swapi-labs-data") {

    description = "SWAPI Labs Data"

    task refreshSwapiData(type: com.github.marceloverdijk.swapi.labs.gradle.tasks.RefreshSwapiDataTask) {
    }
}

project("swapi-labs-graphql") {

    description = "SWAPI Labs GraphQL"

    apply plugin: "org.springframework.boot"

    dependencies {
        compile project(":swapi-labs-commons-jpa")
        compile project(":swapi-labs-data")
        compile("com.graphql-java:graphql-java-tools:${graphqlJavaToolsVersion}")
        compile("com.graphql-java:graphql-spring-boot-starter:${graphqlSpringBootStarterVersion}")
        compile("com.graphql-java:graphiql-spring-boot-starter:${graphiqlSpringBootStarterVersion}")
        compile("com.querydsl:querydsl-jpa")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.boot:spring-boot-starter-aop")
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        compile("org.springframework.boot:spring-boot-starter-web")
        runtime("com.h2database:h2")
        runtime("org.springframework.boot:spring-boot-devtools")
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }

    bootRun {
        systemProperties = System.properties
    }
}

project("swapi-labs-jsonapi") {

    description = "SWAPI Labs JSON API"

    apply plugin: "org.springframework.boot"

    dependencies {
        compile project(":swapi-labs-commons-jpa")
        compile project(":swapi-labs-data")
        compile("com.github.jasminb:jsonapi-converter:${jsonapiConverterVersion}")
        compile("com.querydsl:querydsl-jpa")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.boot:spring-boot-starter-aop")
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        compile("org.springframework.boot:spring-boot-starter-web")
        runtime("com.h2database:h2")
        runtime("org.springframework.boot:spring-boot-devtools")
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }

    bootRun {
        systemProperties = System.properties
    }
}
